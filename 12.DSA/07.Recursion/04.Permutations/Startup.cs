/*Write a recursive program for generating and printing all permutations of the numbers 1, 2, ..., n for given integer number n. Example:

    n=3 → 123 132 213 231 312 321 
    n=4 → 1234 1243 1324 1342 1423 1432 2134 2143 2314 2341 2413 2431 3124 3142 3214 3241 3412 3421 4123 4132 4213 4231 4312 4321 
*/

namespace _04.Permutations
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    public class Startup
    {
        private static List<int[]> permutations = new List<int[]>();

        public static void Main()
        {
            var n = 4;
            int[] numbers = new int[n];

            for (int i = 0; i < numbers.Length; i++)
            {
                numbers[i] = i + 1;
            }

            GeneratePermutations(0, numbers);
            PrintPermutation(permutations);
        }

        private static void GeneratePermutations(int startIndex, int[] arrayOfNumers)
        {
            if (startIndex >= arrayOfNumers.Length)
            {
                // Clone before saving to the list, since array is a reference type (otherwise the list will contain equal arrays)
                int[] clone = (int[])arrayOfNumers.Clone(); 
                permutations.Add(clone);
            }

            // Permutations are generated by swaping elements in the array
            for (int i = startIndex; i < arrayOfNumers.Length; i++)
            {
                Swap(startIndex, i, arrayOfNumers);
                GeneratePermutations(startIndex + 1, arrayOfNumers);
                Swap(startIndex, i, arrayOfNumers);
            }
        }

        private static void Swap(int firstElement, int secondElement, int[] input)
        {
            var element = input[firstElement];
            input[firstElement] = input[secondElement];
            input[secondElement] = element;
        }

        private static void PrintPermutation(List<int[]> input)
        {
            Console.WriteLine("Number of permutations: {0}", input.Count);

            var sb = new StringBuilder();
            foreach (var p in input)
            {
                sb.AppendLine(string.Join(", ", p));
            }

            Console.WriteLine(sb.ToString());
        }
    }
}
