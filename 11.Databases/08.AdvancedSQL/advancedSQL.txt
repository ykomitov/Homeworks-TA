--Problem 1--
--Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company. Use a nested SELECT statement.--

	USE TelerikAcademy
	SELECT e.FirstName, e.LastName, e.Salary
	FROM Employees e
	WHERE e.Salary = (SELECT MIN(Salary) FROM Employees)

--Problem 2--
--Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company.

	USE TelerikAcademy
	SELECT e.FirstName, e.LastName, e.Salary
	FROM Employees e
	WHERE e.Salary <= (SELECT (MIN(Salary)*1.1) FROM Employees)

--Problem 3--
--Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department. Use a nested SELECT statement.

	USE TelerikAcademy
	SELECT e.FirstName + ' ' + e.LastName as 'Employee Name', e.Salary, d.Name
	FROM Employees e
	JOIN Departments d ON d.DepartmentID = e.DepartmentID
	WHERE e.Salary = 
		(SELECT MIN(Salary) FROM Employees em
		WHERE em.DepartmentID = e.DepartmentID)
	ORDER BY e.DepartmentID

--Problem 4--
--Write a SQL query to find the average salary in the department #1.--
	
	USE TelerikAcademy
	SELECT AVG(e.Salary) AS 'Average Salary in Department 1'
	FROM Employees e
	WHERE e.DepartmentID = 1

--Problem 5--
--Write a SQL query to find the average salary in the "Sales" department.--

	USE TelerikAcademy
	SELECT AVG(e.Salary) AS 'Average Salary in Sales Department'
	FROM Employees e
	JOIN Departments d ON e.DepartmentID = d.DepartmentID
	WHERE d.Name = 'Sales'

--Problem 6--
--Write a SQL query to find the number of employees in the "Sales" department.--

	USE TelerikAcademy
	SELECT COUNT(e.EmployeeID) AS 'Number Of Employees In Sales Department'
	FROM Employees e
	JOIN Departments d ON e.DepartmentID = d.DepartmentID
	WHERE d.Name = 'Sales'


--Problem 7--
--Write a SQL query to find the number of all employees that have manager.

	USE TelerikAcademy
	SELECT COUNT(e.EmployeeID) AS 'Number Of Employees With Manager'
	FROM Employees e
	WHERE e.ManagerID IS NOT NULL

--Problem 8--
--Write a SQL query to find the number of all employees that have no manager.

	USE TelerikAcademy
	SELECT COUNT(e.EmployeeID) AS 'Number Of Employees Without Manager'
	FROM Employees e
	WHERE e.ManagerID IS NULL

--Problem 9--
--Write a SQL query to find all departments and the average salary for each of them.

	USE TelerikAcademy
	SELECT AVG(e.Salary) AS 'Average Salary', d.Name
	FROM Employees e
	JOIN Departments d ON e.DepartmentID = d.DepartmentID
	GROUP BY d.Name
	ORDER BY 'Average Salary'

--Problem 10--
--Write a SQL query to find the count of all employees in each department and for each town.

	USE TelerikAcademy
	SELECT COUNT(e.EmployeeID) AS 'Count Of Employees', d.Name AS 'Departnemt', t.Name AS 'Town'
	FROM Employees e
	JOIN Departments d ON e.DepartmentID = d.DepartmentID
	JOIN Addresses a ON a.AddressID = e.AddressID
	JOIN Towns t ON t.TownID = a.TownID
	GROUP BY d.Name, t.Name
	
--Problem 11--
--Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

	USE TelerikAcademy
	SELECT COUNT(e.FirstName) AS 'Employee COUNT', m.FirstName + ' ' + m.LastName AS 'Manager Name'
	FROM Employees e
	JOIN Employees m ON e.ManagerID = m.EmployeeID
	GROUP BY m.FirstName + ' ' + m.LastName
	HAVING COUNT(e.FirstName) = 5

--Problem 12--
--Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".

	USE TelerikAcademy
	SELECT e.FirstName + ' ' + e.LastName AS 'Employee Name', ISNULL(m.FirstName + ' ' + m.LastName, 'no manager') AS 'Manager Name'
	FROM Employees e
	LEFT JOIN Employees m ON e.ManagerID = m.EmployeeID

--Problem 13--
--Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function.

	USE TelerikAcademy
	SELECT e.FirstName, e.LastName
	FROM Employees e
	WHERE LEN(e.LastName) = 5
	
--Problem 14--
--Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds".--

	SELECT convert(varchar, getdate(), 104) + ' ' + RIGHT(CONVERT(varchar, getdate(), 113), 12)

--Problem 15--
--Write a SQL statement to create a table Users. Users should have username, password, full name and last login time.
--
--    Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint.
--    Define the primary key column as identity to facilitate inserting records.
--    Define unique constraint to avoid repeating usernames.
--    Define a check constraint to ensure the password is at least 5 characters long.

	USE TelerikAcademy
	CREATE TABLE Users (
	  UserId int IDENTITY,
	  Username nvarchar(25) NOT NULL UNIQUE,
	  UserPass nvarchar(100) NOT NULL,
	  FirstName nvarchar(50) NOT NULL,
	  LastName nvarchar(50) NOT NULL,
	  LastLogin datetime NULL,
	  CONSTRAINT PK_Users PRIMARY KEY(UserId)
	)
	
--Problem 16--
--Write a SQL statement to create a view that displays the users from the Users table that have been in the system today. Test if the view works correctly.

	USE TelerikAcademy;
	GO

	CREATE VIEW [SampleView] AS
	SELECT *
	FROM Users u
	WHERE CAST(u.LastLogin AS DATE) >= CAST(GETDATE() AS DATE)

--Problem 17--
--Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint). Define primary key and identity column.

	USE TelerikAcademy
	CREATE TABLE Groups (
	  GroupId int IDENTITY,
	  GroupName nvarchar(25) NOT NULL UNIQUE,
	  CONSTRAINT PK_Groups PRIMARY KEY(GroupId)
	)

--Problem 18--
--Write a SQL statement to add a column GroupID to the table Users.
--
--    Fill some data in this new column and as well in the `Groups table.
--    Write a SQL statement to add a foreign key constraint between tables Users and Groups tables.

	USE TelerikAcademy

	ALTER TABLE Users
	ADD GroupId int

	USE TelerikAcademy
	INSERT INTO Users

	VALUES ('pesho','1234','Pesho','Peshev',GETDATE(),1),
			('gosho','1234','Gosho','Goshev',GETDATE(),1)
	GO

	USE TelerikAcademy
	ALTER TABLE Users ADD FOREIGN KEY (GroupId) REFERENCES Groups(GroupId);
	
--Problem 19--
--Write SQL statements to insert several records in the Users and Groups tables.

	USE TelerikAcademy
	INSERT INTO Users

	VALUES ('marko','1234','Marko','Totev',GETDATE(),1),
			('ivan','1234','Ivan','Ivanov',GETDATE(),1)
	GO
	
	USE TelerikAcademy
	INSERT INTO Groups

	VALUES ('group 1'),
			('group 2')
	GO

--Problem 20--
--Write SQL statements to update some of the records in the Users and Groups tables.

	USE TelerikAcademy

	UPDATE Users
	SET FirstName = 'Alfred'
	WHERE UserId=3 

	UPDATE Groups
	SET GroupName = 'WTF'
	WHERE GroupId = 1 

--Problem 21--
--Write SQL statements to delete some of the records from the Users and Groups tables.

	USE TelerikAcademy

	DELETE FROM Users
	WHERE UserId = 4

--Problem 22--
--Write SQL statements to insert in the Users table the names of all employees from the Employees table.
--
--    Combine the first and last names as a full name.
--    For username use the first letter of the first name + the last name (in lowercase).
--    Use the same for the password, and NULL for last login time.

	USE TelerikAcademy

	INSERT INTO Users
	(UserName, UserPass, FirstName, LastName, LastLogin, GroupId)
	-- First 3 letters used from first name because otherwise there are duplications
	SELECT LOWER(LEFT(e.FirstName, 3)) + LOWER(e.LastName) AS 'UserName', LOWER(LEFT(e.FirstName, 1) + e.LastName) AS 'UserPass', e.FirstName, e.LastName, NULL, NULL
	FROM dbo.Employees e

--Problem 23--
--Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010.

	USE TelerikAcademy
	UPDATE  Users
	SET Pass = NULL
	WHERE DATEDIFF(day, LastLogin, '2016-3-10 00:00:00') > 0

--Problem 24--
--Write a SQL statement that deletes all users without passwords (NULL password).
	
	USE TelerikAcademy
	DELETE Users
	WHERE Pass IS NULL

--Problem 25--
--Write a SQL query to display the average employee salary by department and job title.

	USE TelerikAcademy
	SELECT AVG(e.Salary), e.JobTitle , d.Name
	FROM Employees e, Departments d
	WHERE d.DepartmentID = e.DepartmentID
	GROUP BY e.JobTitle, d.Name

--Problem 26--
--Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it.

	USE TelerikAcademy
	SELECT MIN(e.Salary) as 'Min Salary', e.JobTitle , d.Name as 'Department name', 
	e.FirstName + ' '+ e.LastName as 'Full Name'
	FROM Employees e, Departments d
	WHERE d.DepartmentID = e.DepartmentID
	GROUP BY e.JobTitle, d.Name, e.FirstName + ' ' + e.LastName

--Problem 27--
--Write a SQL query to display the town where maximal number of employees work.

	USE TelerikAcademy
	SELECT TOP  1 COUNT(a.TownID) as [EmployeeCount]
	FROM Addresses a
	JOIN Employees e
	ON e.AddressID=a.AddressID
	JOIN Towns t
	ON t.TownID=a.TownID
	GROUP BY t.TownID 
	ORDER BY EmployeeCount DESC

--Problem 28--
--Write a SQL query to display the number of managers from each town.

	USE TelerikAcademy
	SELECT  COUNT(a.TownID) as [EmployeeCount], t.Name FROM Addresses a
	JOIN Employees e
	ON e.AddressID=a.AddressID
	JOIN Towns t
	ON t.TownID=a.TownID
	WHERE e.ManagerID IS  NOT NULL
	GROUP BY t.Name 
	ORDER BY EmployeeCount DESC

--Problem 29--
--Write a SQL to create table WorkHours to store work reports for each employee (employee id, date, task, hours, comments).
--
--    Don't forget to define identity, primary key and appropriate foreign key.
--    Issue few SQL statements to insert, update and delete of some data in the table.
--    Define a table WorkHoursLogs to track all changes in the WorkHours table with triggers.
--        For each change keep the old record data, the new record data and the command (insert / update / delete).

	USE TelerikAcademy
	--WorkHours--
	DROP TABLE dbo.WorkHours
	CREATE TABLE WorkHours(
	Id INT PRIMARY KEY IDENTITY(1,1),
	EmployeeId INT NOT NULL,
	DateOfReport DATETIME,
	Task NVARCHAR(50),
	HoursOfWork INT,
	Comments NVARCHAR(500),
	CONSTRAINT FK_WorkHours_Employees FOREIGN KEY (EmployeeId) REFERENCES Employees(EmployeeID)
	)


	--Add some records--
	DECLARE @counter int
	SET @counter=0

	WHILE @counter<30
	BEGIN
	INSERT INTO WorkHours(EmployeeId,DateOfReport,Task,HoursOfWork,Comments)
	VALUES (@counter,GETDATE(),'task'+CONVERT(VARCHAR(5), @counter),8,'comment'+CONVERT(VARCHAR(5), @counter))
	SET @counter=@counter +1
	END
	DROP TABLE WorkHoursLog
	GO

	--WorkLogs--
	CREATE TABLE WorkHoursLog(
	Id int PRIMARY KEY IDENTITY(1,1),
	WorkHoursId int,
	EmployeeId INT FOREIGN KEY REFERENCES Employees(EmployeeId),
	DateOfReport DATETIME,
	Task NVARCHAR(50),
	HoursOfWork INT,
	Comments NVARCHAR(500),
	[Action] varchar(10) NOT NULL
	)

	-- triggers --

	--INSERT--
	DROP TRIGGER trg_WorkHours_Insert
	GO
	CREATE TRIGGER trg_WorkHours_Insert ON WorkHours
	FOR INSERT 
	AS
	INSERT INTO WorkHoursLog(WorkHoursId, EmployeeId, DateOfReport, Task, HoursOfWork, Comments, [Action])
		SELECT Id, EmployeeID, DateOfReport, Task, HoursOfWork, Comments, 'Insert'
		FROM inserted
	PRINT 'FOR INSERT trigger fired.'
	GO

	--DELTETE--
	DROP TRIGGER trg_WorkHours_Delete
	GO
	CREATE TRIGGER trg_WorkHours_Delete ON WorkHours
	FOR DELETE 
	AS
	INSERT INTO WorkHoursLog(WorkHoursId,EmployeeId, DateOfReport, Task, HoursOfWork, Comments, [Action])
		SELECT Id, EmployeeId, DateOfReport, Task, HoursOfWork, Comments, 'Delete'
		FROM deleted
	PRINT 'FOR DELETE trigger fired.'
	GO

	--UPDATE--
	DROP TRIGGER trg_WorkHours_Update
	GO
	CREATE TRIGGER trg_WorkHours_Update ON WorkHours
	FOR UPDATE 
	AS
	INSERT INTO WorkHoursLog(WorkHoursId,EmployeeId, DateOfReport, Task, HoursOfWork, Comments, [Action])
		SELECT Id, EmployeeId, DateOfReport, Task, HoursOfWork, Comments, 'UPDATE'
		FROM inserted
	PRINT 'FOR UPDATE trigger fired.'
	GO


	--Trigers tests--

	--DELETE--
	DELETE FROM  WorkHours 
	WHERE EmployeeId=25


	--INSERT--
	DECLARE @counter INT
	SET @counter=31

	INSERT INTO WorkHours(EmployeeId,DateOfReport,Task,HoursOfWork,Comments)
	VALUES (@counter,GETDATE(),'task'+CONVERT(VARCHAR(5), @counter),8,'comment'+CONVERT(VARCHAR(5), @counter))

	--UPDATE--
	UPDATE WorkHours
	SET HoursOfWork=9 
	WHERE HoursOfWork=8

--Problem 30--
-- Start a database transaction, delete all employees from the 'Sales' department along with all dependent records from the pother tables.
--
--    At the end rollback the transaction.

	BEGIN TRAN

	ALTER TABLE Departments
		DROP CONSTRAINT FK_Departments_Employees
	GO

	DELETE e FROM  Employees e, Departments d
		WHERE e.DepartmentID=d.DepartmentID
		AND d.Name='Sales'

	ROLLBACK TRAN

--Problem 31--
--Start a database transaction and drop the table EmployeesProjects.
--
--    Now how you could restore back the lost table data?

	BEGIN TRAN

	DROP TABLE EmployeesProjects

	ROLLBACK TRAN

--Problem 32--
--Find how to use temporary tables in SQL Server.
--
--    Using temporary tables backup all records from EmployeesProjects and restore them back after dropping and re-creating the table.

	BEGIN TRAN

	SELECT *  INTO  #Temp_EmployeesProjects
	FROM EmployeesProjects

	DROP TABLE EmployeesProjects

	SELECT * INTO EmployeesPRojects
	FROM #Temp_EmployeesProjects

	ROLLBACK TRAN